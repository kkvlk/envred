#!/usr/bin/env ruby

require 'rubygems'
require 'envred'
require 'gli'

include GLI::App

program_desc "Environment configuration backed with Redis."

desc "The URL of central env server."
flag [:c, :central], :default_value => ENV['ENVRED_CENTRAL']

pre do |globals, command, options, args|
  $envred = Envred.new(globals[:central])
end

desc "Wrap command with loaded env variables."
long_desc "Executes given command previously setting all loaded env variables."
command :wrap do |c|
  c.action do |globals, options, args|
    if args.empty?
      help_now!('you must specify command to run')
    end

    $envred.apply do
      exit(system(args.join(" ")))
    end
  end
end

desc "List variables."
long_desc "Display list of stored variables."
command :list do |c|
  c.action do |globals, options, args|
    print "Loading all variables..."

    all = $envred.load

    print "\r" + (" " * 40) + "\r"

    if all.empty?
      puts "No variables to show!"
    else
      all.each do |key, val|
        puts "#{key}=#{val.inspect}"
      end
    end
  end
end

desc "Set env variables."
long_desc "Assigns values to one or more env variale."
command :set do |c|
  c.action do |globals, options, args|
    if args.size % 2 != 0
      help_now!("mismatched number of key-value pair arguments")
    elsif args.size < 2
      help_now!("you must specify at leat one key-value pair")
    end

    print "Saving variables... "

    $envred.set(*args)

    puts "Ok!"
  end
end

desc "Remove variables."
long_desc "Removes one or more env variable."
command :unset do |c|
  c.action do |globals, options, args|
    if args.empty?
      help_now!("you must specify at leat one key to remove")
    end

    print "Removing variables... "

    $envred.unset(*args)

    puts "Ok!"
  end
end

desc "Delete all variables."
long_desc "Removes all stored variables from the project."
command :purge do |c|
  c.action do |globals, options, args|
    print "Purging variables list... "

    $envred.purge

    puts "Ok!"
  end
end

desc "Display current version."
long_desc "Displays current version number."
command :version do |c|
  c.action do |globals, options, args|
    puts "envred v#{Envred::VERSION}"
  end
end

exit run(ARGV)
